----->>>> by using mongo DB crud operations are done those are below

-------------------------------------------------------------------------------------------------------- playerdao 

package com.example.mongocrud.dao;

import java.util.List;

import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;
import org.springframework.stereotype.Repository;

import com.example.mongocrud.model.Player;

@Repository
public interface PlayerDao extends MongoRepository<Player, Integer>{         //------->>> Mongo repositorry contains all the methods like crud repository


	//public Player findByPlayerName(String playerName);
	
//	@Query("{'playerName':'virat'}")                          //---------------------->>> to find palyername as 'virat'
//	public Player findByPlayerName(String playerName);          
	
	@Query("{'playerName':?0}")                                  //---------------------->>> to find player name as parameter given
	public Player findByPlayerName(String playerName);

	
	@Query("{'playerName':?0,'team':?1}")   //--0 index & 1st index                      //---------------------->>> to find player name as two parameters given 
	public Player findByNameAndTeam(String playerName, String team);


	
	@Query("{'playerId':{$gt:?0}}")
	public List<Player> idGrter(int playerId);                             //---------------------->>> to find playerid greater than (parameter) given 
                      //--- idGrter ---->> is a method already present in the mongoRepository

	@Query("{'playerId':{$gt:?0,$lt:?1}}")                                 //---------------------->>>> to find player id in between (parameters) given
	public List<Player> searchBetweenIds(int idGt,int idLt);
                      //-- searchBetweenIds ------ is the method already present mongoRepository

	
	


}



------------------------------------------------------------------------------------------------------------------playerservice


package com.example.mongocrud.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.example.mongocrud.model.Player;




@Service
public interface PlayerService {

	
	public Player savePlayer(Player player);
  
	public Player findById(int playerId);


	public Player findByPlayerName(String playerName);

	public Player findByNameAndTeam(String playerName, String team);

	public List<Player> idGrter(int playerId);

	public List<Player> searchBetweenIds(int idGt,int idLt);

}


--------------------------------------------------------------------------------------------------------------------playerserviceImpl 


package com.example.mongocrud.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.mongocrud.dao.PlayerDao;
import com.example.mongocrud.model.Player;

@Service
public class PlayerServiceImpl implements PlayerService{

	@Autowired
	PlayerDao playerDao;
	
  
	@Override
	public Player savePlayer(Player player) {

		return playerDao.save(player);
	}

	@Override
	public Player findById(int playerId) {

		Optional<Player> playerOpt= playerDao.findById(playerId);
		if(playerOpt.isPresent())
		return playerOpt.get();
	
		return null;
	
	}

	
	public Player findByPlayerName(String playerName)
	{
		
		return playerDao.findByPlayerName(playerName);
	}
	
	
	public Player findByNameAndTeam(String playerName, String team)
	{
		
		return playerDao.findByNameAndTeam(playerName, team);      //---->>> method is called
	}

	
	public List<Player> idGrter(int playerId)
	{
		return playerDao.idGrter(playerId);       //----->>> idGrter method is called
	}

	public List<Player> searchBetweenIds(int idGt,int idLt)
	{
		return playerDao.searchBetweenIds(idGt, idLt);
	}

}


-----------------------------------------------------------------------------------------------------------------------controller



package com.example.mongocrud.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.mongocrud.model.Player;
import com.example.mongocrud.service.PlayerService;

@RestController
@RequestMapping("players")
public class PlayerController {

	@Autowired
	PlayerService playerService;
	
	
	@PostMapping
	public ResponseEntity<Player> savePlayer(@RequestBody Player player)
	{
		
		Player savedPlayer=playerService.savePlayer(player);
		return new ResponseEntity<Player>(savedPlayer,HttpStatus.OK);
	}
	
	
	@GetMapping("{playerId}")
	public ResponseEntity<Player> getPlayer(@PathVariable int playerId)
	{
		
		Player savedPlayer=playerService.findById(playerId);
		return new ResponseEntity<Player>(savedPlayer,HttpStatus.OK);
	}
	
	
	@GetMapping("name/{playerName}")
	public ResponseEntity<Player> getPlayerByName(@PathVariable String playerName)
	{
		
		Player savedPlayer=playerService.findByPlayerName(playerName);
		return new ResponseEntity<Player>(savedPlayer,HttpStatus.OK);
	}
	
	

	@GetMapping("name/team/{playerName}/{team}")
	public ResponseEntity<Player> getPlayerByName(@PathVariable String playerName,@PathVariable String team)
	{
		
		Player savedPlayer=playerService.findByNameAndTeam(playerName, team);
		return new ResponseEntity<Player>(savedPlayer,HttpStatus.OK);
	}
	
	
	
	@GetMapping("idgt/{playerId}")    //--->> get id greater than the 
	public ResponseEntity<List<Player>> getPlayerByName(@PathVariable int playerId)
	{
		
		List<Player> players=playerService.idGrter(playerId);
		return new ResponseEntity<List<Player>>(players,HttpStatus.OK);
	}

	@GetMapping("idgt/lt/{idGt}/{idLt}")     ///----->>> get id in between idGt and idLt
	public ResponseEntity<List<Player>> getPlayerByIdGtAndLt(@PathVariable int idGt,@PathVariable int idLt)
	{
		
		List<Player> players=playerService.searchBetweenIds(idGt, idLt);
		return new ResponseEntity<List<Player>>(players,HttpStatus.OK);
	}

	
}
